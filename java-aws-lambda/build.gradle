import com.github.jengelman.gradle.plugins.shadow.transformers.*

plugins {
	id 'org.springframework.boot' version '2.5.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "com.github.johnrengelman.shadow" version "7.0.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2020.0.3")
	awsLambdaCore = "1.2.1"
	awsLambdaEvents = "3.10.0"
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-webflux")
	implementation("org.springframework.cloud:spring-cloud-function-web")

	implementation("org.springframework.cloud:spring-cloud-function-adapter-aws")

	runtimeOnly("com.amazonaws:aws-lambda-java-core:${awsLambdaCore}")
	runtimeOnly("com.amazonaws:aws-lambda-java-events:${awsLambdaEvents}")

	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("io.projectreactor:reactor-test")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}

jar {
	manifest {
		attributes 'Start-Class': 'com.example.javaawslambda.JavaAwsLambdaApplication'
	}
}

assemble.dependsOn = [shadowJar]
shadowJar {
	archiveFileName = 'awsLamdaSample.jar'
	dependencies {
		exclude("org.springframework.cloud:spring-cloud-function-web")
	}
	// Required for Spring
	mergeServiceFiles()
	append 'META-INF/spring.handlers'
	append 'META-INF/spring.schemas'
	append 'META-INF/spring.tooling'
	transform(PropertiesFileTransformer) {
		paths = ['META-INF/spring.factories']
		mergeStrategy = "append"
	}
}